---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import "@/styles/main.css";
import { AstroFont } from "astro-font";
import { ClientRouter } from "astro:transitions";
import Analytics from '@vercel/analytics/astro'

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  meta_title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
  // Enhanced props for rich previews
  date?: Date | string;
  categories?: string[];
  tags?: string[];
  is_post?: boolean;
}

// distructure frontmatters
const { 
  title, 
  meta_title, 
  description, 
  image, 
  noindex, 
  canonical,
  date,
  categories,
  tags,
  is_post 
} = Astro.props;

// Construct clean URL without double slashes
const cleanUrl = `${config.site.base_url}${Astro.url.pathname}`.replace(/([^:]\/)\/+/g, "$1");

// Determine content type for Open Graph
const contentType = is_post ? "article" : "website";

// Format date for article metadata
const formattedDate = date ? new Date(date).toISOString() : undefined;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta name="theme-name" content="bookworm-light-astro" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary!,
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary!,
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- title -->
    <title>
      {plainify(meta_title ? meta_title : title ? title : config.site.title)}
    </title>

    <!-- canonical url -->
    {canonical && <link rel="canonical" href={canonical} item-prop="url" />}

    <!-- noindex robots -->
    {noindex && <meta name="robots" content="noindex,nofollow" />}

    <!-- meta-description -->
    <meta
      name="description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />

    <ClientRouter />

    <!-- author from config.json -->
    <meta name="author" content={config.metadata.meta_author} />

    <!-- Enhanced Open Graph meta tags -->
    <meta property="og:locale" content="en_US" />
    <meta property="og:site_name" content={config.site.title} />
    <meta property="og:type" content={contentType} />
    <meta
      property="og:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />
    <meta
      property="og:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />
    <meta property="og:url" content={cleanUrl} />
    <meta
      property="og:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />
    <!-- <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content={image && image.endsWith('.png') ? "image/png" : "image/jpeg"} />
    <meta property="og:image:alt" content={plainify(
      meta_title ? meta_title : title ? title : config.site.title
    )} /> -->

    <!-- Article-specific Open Graph tags for blog posts -->
    {is_post && formattedDate && (
      <meta property="article:published_time" content={formattedDate} />
    )}
    {is_post && categories && categories.map(category => (
      <meta property="article:section" content={category} />
    ))}
    {is_post && tags && tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}

    <!-- Enhanced Twitter Card meta tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@proseandpalate" />
    <meta name="twitter:creator" content="@proseandpalate" />
    <meta
      name="twitter:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title
      )}
    />
    <meta
      name="twitter:description"
      content={plainify(
        description ? description : config.metadata.meta_description
      )}
    />
    <meta
      name="twitter:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />
    <meta name="twitter:image:alt" content={plainify(
      meta_title ? meta_title : title ? title : config.site.title
    )} />

    <script is:inline>
      const applyTheme = () => {
        const theme = (() => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        })();

        if (theme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          document.documentElement.classList.add('dark');
        }
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme') !== theme) {
          localStorage.setItem('theme', theme);
        }
        // console.log('[ThemeApply] Applied theme:', theme, 'HTML classList:', document.documentElement.classList.toString()); // Optional: for debugging
      };

      applyTheme(); // Apply on initial load
      document.addEventListener('astro:after-swap', applyTheme); // Re-apply after page transitions

      window.toggleTheme = () => {
        console.log('[ThemeToggle DEBUG] toggleTheme function CALLED.');
        try {
          const currentClassList = document.documentElement.classList.toString();
          console.log('[ThemeToggle DEBUG] HTML classList BEFORE toggle:', currentClassList);
          const currentThemeInStorage = localStorage.getItem('theme');
          console.log('[ThemeToggle DEBUG] Theme in localStorage BEFORE toggle:', currentThemeInStorage);

          let newTheme;
          if (document.documentElement.classList.contains('dark')) {
            newTheme = 'light';
            document.documentElement.classList.remove('dark');
            console.log('[ThemeToggle DEBUG] Determined new theme: LIGHT. Removed .dark class.');
          } else {
            newTheme = 'dark';
            document.documentElement.classList.add('dark');
            console.log('[ThemeToggle DEBUG] Determined new theme: DARK. Added .dark class.');
          }
          
          localStorage.setItem('theme', newTheme);
          console.log('[ThemeToggle DEBUG] Theme in localStorage AFTER toggle:', newTheme);
          console.log('[ThemeToggle DEBUG] HTML classList AFTER toggle:', document.documentElement.classList.toString());

        } catch (error) {
          console.error('[ThemeToggle DEBUG] Error in toggleTheme:', error);
        }
      };
    </script>
  </head>
  <body>
    <TwSizeIndicator />
    <Header />
    <main id="main-content" class="min-h-[60vh]">
      <slot />
    </main>
    <Footer />
    <Analytics/>
  </body>
</html>
