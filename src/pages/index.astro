---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import Posts from "@/layouts/Posts.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { humanize } from "@/lib/utils/textConverter";
import dateFormat from "@/lib/utils/dateFormat";

// Get all posts and categories
const posts = await getSinglePage("posts");
const sortedPosts = sortByDate(posts);
const categories = await getTaxonomy("posts", "categories");

// Pagination
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const currentPosts = sortedPosts.slice(0, config.settings.pagination);

// Prepare posts data for client-side filtering
const postsForClient = sortedPosts.map(post => ({
  id: post.id,
  data: {
    title: post.data.title,
    description: post.data.description,
    date: post.data.date,
    image: post.data.image,
    categories: post.data.categories,
    authors: post.data.authors,
    tags: post.data.tags
  }
}));
---

<Base>
  <section class="section">
    <div class="container">
      <!-- Hero Section -->
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-text-dark mb-4">
          Prose & Palate
        </h1>
        <p class="text-xl text-text mb-6 max-w-3xl mx-auto">
          Where taste meets literature. Curated reviews of exceptional bars, premium spirits, and captivating books.
        </p>
      </div>

      <!-- Category Filter -->
      <div class="category-filter mb-8">
        <div class="flex flex-wrap gap-2 justify-center md:justify-start">
          <button
            class="category-btn active inline-flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 bg-primary text-white border-primary shadow-md"
            data-category="all"
          >
            <span class="font-medium">All</span>
          </button>
          {categories.map((category) => {
            return (
              <button
                class="category-btn inline-flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 bg-body text-text border-border hover:border-primary hover:text-primary hover:shadow-sm dark:bg-body dark:text-text dark:border-border dark:hover:border-primary dark:hover:text-primary"
                data-category={category}
              >
                <span class="font-medium">{humanize(category)}</span>
              </button>
            );
          })}
        </div>
      </div>

      <!-- Posts Grid -->
      <div id="posts-container" data-all-posts>
        <Posts className="mb-16" posts={currentPosts} />
      </div>

      <!-- Empty State (hidden by default) -->
      <div id="empty-state" class="text-center py-12 hidden">
        <div class="text-text-light text-6xl mb-4">üîç</div>
        <h3 class="text-xl font-semibold text-text-dark mb-2">No posts found</h3>
        <p class="text-text">Try selecting a different category or check back later for new content.</p>
      </div>
    </div>
  </section>
</Base>

<script>
  // Use event delegation to ensure handlers always work
  document.addEventListener('click', function(e: MouseEvent) {
    const target = e.target as HTMLElement;
    if (target && target.closest('.category-btn')) {
      e.preventDefault();
      const button = target.closest('.category-btn') as HTMLElement;
      const selectedCategory = button.getAttribute('data-category');
      
      handleCategoryFilter(selectedCategory || 'all');
    }
  });

  // Initialize on multiple events to ensure it works when coming back from other pages
  document.addEventListener('DOMContentLoaded', initializeFromURL);
  document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
      setTimeout(initializeFromURL, 50);
    }
  });
  window.addEventListener('pageshow', function() {
    setTimeout(initializeFromURL, 50);
  });
  window.addEventListener('focus', function() {
    setTimeout(initializeFromURL, 50);
  });

  // Handle browser back/forward
  window.addEventListener('popstate', function() {
    setTimeout(initializeFromURL, 50);
  });

  function handleCategoryFilter(selectedCategory: string) {
    updateActiveButton(selectedCategory);
    filterPosts(selectedCategory);
    
    // Update URL
    const newUrl = selectedCategory === 'all' ? '/' : `/?category=${selectedCategory}`;
    if (window.location.href !== window.location.origin + newUrl) {
      window.history.pushState({ category: selectedCategory }, '', newUrl);
    }
  }

  function initializeFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const category = urlParams.get('category') || 'all';
    updateActiveButton(category);
    filterPosts(category);
  }

  function updateActiveButton(selectedCategory: string) {
    const categoryButtons = document.querySelectorAll('.category-btn');
    categoryButtons.forEach(btn => {
      const htmlBtn = btn as HTMLElement;
      const btnCategory = htmlBtn.getAttribute('data-category');

      // Reset classes to a common base state before applying active/inactive specifics
      htmlBtn.classList.remove(
        'bg-primary', 'text-white', 'border-primary', 'shadow-md', // Active state classes
        'bg-body', 'text-text', 'border-border', // Base inactive state classes (light/dark aware)
        'dark:bg-body', 'dark:text-text', 'dark:border-border', // Explicit dark for base (might be redundant if bg-body etc. are fully dynamic)
        'hover:border-primary', 'hover:text-primary', 'hover:shadow-sm',
        'dark:hover:border-primary', 'dark:hover:text-primary'
      );

      if (btnCategory === selectedCategory) {
        // Active button: Primary background, white text (usually fine for both themes)
        htmlBtn.classList.add('bg-primary', 'text-white', 'border-primary', 'shadow-md');
      } else {
        // Inactive button: Theme-aware body background, text, and border
        // The dark:* variants in the initial class attribute handle dark mode for inactive buttons.
        // The js only needs to ensure the base classes are correctly applied for light mode / default inheritance.
        htmlBtn.classList.add(
          'bg-body', 'text-text', 'border-border',
          'hover:border-primary', 'hover:text-primary', 'hover:shadow-sm'
          // No need to add dark:* here as they are in the static class list or handled by var() in bg-body etc.
        );
      }
    });
  }

  function filterPosts(selectedCategory: string) {
    const postsContainer = document.getElementById('posts-container') as HTMLElement | null;
    const emptyState = document.getElementById('empty-state') as HTMLElement | null;
    
    if (!postsContainer) return;

    // Get all post elements and extract their categories
    const allPostElements = postsContainer.querySelectorAll('.row > div');
    let visibleCount = 0;
    
    allPostElements.forEach(postEl => {
      const htmlPostEl = postEl as HTMLElement;
      const categoryLinks = htmlPostEl.querySelectorAll('a[href^="/categories/"]');
      const categories = Array.from(categoryLinks).map(link => {
        const href = link.getAttribute('href');
        return href ? href.replace('/categories/', '').toLowerCase() : '';
      }).filter(cat => cat);
      
      if (selectedCategory === 'all' || categories.includes(selectedCategory.toLowerCase())) {
        htmlPostEl.style.display = '';
        visibleCount++;
      } else {
        htmlPostEl.style.display = 'none';
      }
    });

    // Show/hide empty state
    if (emptyState) {
      if (visibleCount === 0) {
        postsContainer.style.display = 'none';
        emptyState.classList.remove('hidden');
      } else {
        postsContainer.style.display = 'block';
        emptyState.classList.add('hidden');
      }
    }
  }
</script>

<style>
  .category-filter {
    margin-bottom: 2rem;
  }
  
  @media (max-width: 768px) {
    .category-filter {
      margin-bottom: 1.5rem;
    }
  }
</style>
